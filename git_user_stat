#!/bin/bash

function printTable()
{
    local -r delimiter="${1}"
    local -r data="$(removeEmptyLines "${2}")"

    if [[ "${delimiter}" != '' && "$(isEmptyString "${data}")" = 'false' ]]
    then
        local -r numberOfLines="$(wc -l <<< "${data}")"

        if [[ "${numberOfLines}" -gt '0' ]]
        then
            local table=''
            local i=1

            for ((i = 1; i <= "${numberOfLines}"; i = i + 1))
            do
                local line=''
                line="$(sed "${i}q;d" <<< "${data}")"

                local numberOfColumns='0'
                numberOfColumns="$(awk -F "${delimiter}" '{print NF}' <<< "${line}")"

                # Add Line Delimiter

                if [[ "${i}" -eq '1' ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi

                # Add Header Or Body

                table="${table}\n"

                local j=1

                for ((j = 1; j <= "${numberOfColumns}"; j = j + 1))
                do
                    table="${table}$(printf '#| %s' "$(cut -d "${delimiter}" -f "${j}" <<< "${line}")")"
                done

                table="${table}#|\n"

                # Add Line Delimiter

                if [[ "${i}" -eq '1' ]] || [[ "${numberOfLines}" -gt '1' && "${i}" -eq "${numberOfLines}" ]]
                then
                    table="${table}$(printf '%s#+' "$(repeatString '#+' "${numberOfColumns}")")"
                fi
            done

            if [[ "$(isEmptyString "${table}")" = 'false' ]]
            then
                echo -e "${table}" | column -s '#' -t | awk '/^\+/{gsub(" ", "-", $0)}1'
            fi
        fi
    fi
}

function removeEmptyLines()
{
    local -r content="${1}"

    echo -e "${content}" | sed '/^\s*$/d'
}

function repeatString()
{
    local -r string="${1}"
    local -r numberToRepeat="${2}"

    if [[ "${string}" != '' && "${numberToRepeat}" =~ ^[1-9][0-9]*$ ]]
    then
        local -r result="$(printf "%${numberToRepeat}s")"
        echo -e "${result// /${string}}"
    fi
}

function isEmptyString()
{
    local -r string="${1}"

    if [[ "$(trimString "${string}")" = '' ]]
    then
        echo 'true' && return 0
    fi

    echo 'false' && return 1
}

function trimString()
{
    local -r string="${1}"

    sed 's,^[[:blank:]]*,,' <<< "${string}" | sed 's,[[:blank:]]*$,,'
}

names=""
commits=""
binary_files=0
not_present=0
present_files=0
empty_lines=0
declare -A loc
declare -A empty_loc
verbose=false

while [ -n "$1" ]
do
  case "$1" in
    -v) verbose=true
  esac
  shift
done


#i=0
for file in `git ls-files`
do
  if [ -f $file ]
  then
    binary=`file --mime $file | ag charset=binary`
    if [ -z "$binary" ]
    then
      present_files=$((present_files + 1))
      blame_content=`git blame $file`
      file_names=`echo "$blame_content" | sed -e "s/^\^\?[0-9a-f]\+ [^(]*(\([^)]\+\).*/\1/" | sed -e "s/<//;s/>//;s/[0-9]\+-[0-9]\+.*//" | sed -e "s/\s*$//" | sort | uniq | sed -e "s/ /:/"`
      file_commit=`echo "$blame_content" | sed -e "s/^\^\?\([0-9a-f]\+\) [^(]*(\([^)]\+\))/\1 \2/" | sed -e "s/^<\([^>]\)\+>/\1/;s/\s\+[0-9]\+-[0-9]\+-[0-9]\+\s\+[0-9]\+:[0-9]\+:[0-9]\+\s\++[0-9]\+\s\+[0-9]\+.*//" | sort | uniq`
      if [ -z "$names" ]
      then
        names=$file_names
        commits=$file_commit
      else
        names=`echo -e "$names\n$file_names" | sort | uniq`
        commits=`echo -e "$commits\n$file_commit" | sort | uniq`
      fi
      blame_content=`echo "$blame_content" | sed -e "s/^\^\?[0-9a-f]\+ [^(]*(\([^)]\+\))/\1/" | sed -e "s/^<\([^>]\)\+>/\1/;s/\s\+[0-9]\+-[0-9]\+-[0-9]\+\s\+[0-9]\+:[0-9]\+:[0-9]\+\s\++[0-9]\+\s\+[0-9]\+//"`
      for name in $file_names
      do
        space_name=`echo "$name" | sed -e "s/:/ /"`
        file_owned=`echo "$blame_content" | grep "$space_name"`
        file_loc=`echo "$file_owned" | wc -l`
        file_empty=`echo "$file_owned" | sed -n "/^$space_name\s*\$/p" | wc -l`
        if [ -z "$loc[$name]" ]
        then
          loc[$name]=$file_loc
          empty_loc[$name]=$file_empty
        else
          loc[$name]=$(( ${loc[$name]} + file_loc))
          empty_loc[$name]=$(( ${empty_loc[$name]} + file_empty))
        fi
      done
      if [ "$verbose" = true ]
      then
        echo "$file"
        echo "$space_name: $file_loc / $file_empty"
        echo ""
      fi
    else
      binary_files=$((binary_files + 1))
    fi
  else
    not_present=$((not_present + 1))
  fi
#  if [ "$i" -gt 1 ]
#  then
#    break
#  fi
#  i=$(( i + 1 ))
done

table_content="Author,Commits,LOC,Empty lines"
total_numbers=0
total_loc=0
total_empty=0
for name in $names
do
  space_name=`echo "$name" | sed -e "s/:/ /"`
  numbers=`echo "$commits" | sed -e "s/\s*$//" | grep "$space_name$" | wc -l`
  table_content=`echo -e "$table_content\n$space_name,$numbers,${loc[$name]},${empty_loc[$name]}"`
  total_numbers=$(( total_numbers + numbers ))
  total_loc=$(( ${loc[$name]} + total_loc ))
  total_empty=$(( total_empty + ${empty_loc[$name]} ))
done
table_content=`echo -e "$table_content\n,,,\nTotal,$total_numbers,$total_loc,$total_empty"`

printTable ',' "$table_content"

